<?php
/**
 * @version 14/1/21 2:23 p. m.
 * @author  David Lopez <dleo.lopez@gmail.com>
 */

namespace HSDCL\DteCl\Tests\Feature;


use HSDCL\DteCl\Sii\Certification\BasicCertificationBuilder;
use HSDCL\DteCl\Sii\Certification\ExemptCertificationBuilder;
use HSDCL\DteCl\Sii\Certification\FileSource;
use HSDCL\DteCl\Tests\TestCase;
use HSDCL\DteCl\Util\Configuration;
use sasco\LibreDTE\FirmaElectronica;
use sasco\LibreDTE\Sii\Folios;
use HSDCL\DteCl\Sii\Base\Dte;

class ExemptCertificationBuilderTest extends TestCase
{
    /**
     * @var FirmaElectronica
     */
    protected $firma;

    /**
     * @var Folios
     */
    protected $folios;

    /**
     * @var ExemptCertificationBuilder
     */
    protected $certification;

    /**
     * @throws \HSDCL\DteCl\Util\Exception
     * @author David Lopez <dleo.lopez@gmail.com>
     */
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $dotenv = \Dotenv\Dotenv::create(__DIR__ . '/../..');
        $dotenv->load();
        $emisor = [
            'RUTEmisor'  => env('RUTEmisor'),
            'RznSoc'     => env('RznSoc'),
            'GiroEmis'   => env('GiroEmis'),
            'Acteco'     => env('Acteco'),
            'DirOrigen'  => env('DirOrigen'),
            'CmnaOrigen' => env('CmnaOrigen'),
        ];

        $receptor = [
            'RUTRecep'    => env('RUTRecep'),    #'81515100-3',
            'RznSocRecep' => env('RznSocRecep'), #'SELIM DABED SPA.',
            'GiroRecep'   => env('GiroRecep'),   #'BARRACA Y FERRETERIA',
            'DirRecep'    => env('DirRecep'),    #'BENAVENTE 516',
            'CmnaRecep'   => env('CmnaRecep')    #'OVALLE',
        ];
        $this->config = Configuration::getInstance('folios-34', __DIR__ . '/../../resources/assets/xml/folios/34.xml');
        $this->firma = new FirmaElectronica(['file' => __DIR__ . '/../../resources/assets/certs/cert.pfx', 'pass' => env('FIRMA_PASS')]);
        $this->folios = [
            Dte::FACTURA_EXENTA_ELECTRONICA => new Folios(file_get_contents(Configuration::getInstance('folios-' . Dte::FACTURA_EXENTA_ELECTRONICA, __DIR__ . '/../../resources/assets/xml/folios/34.xml')->getFilename())),
            Dte::NOTA_DE_CREDITO_ELECTRONICA => new Folios(file_get_contents(Configuration::getInstance('folios-' . Dte::NOTA_DE_CREDITO_ELECTRONICA, __DIR__ . '/../../resources/assets/xml/folios/61.xml')->getFilename())),
            Dte::NOTA_DE_DEBITO_ELECTRONICA => new Folios(file_get_contents(Configuration::getInstance('folios-' . Dte::NOTA_DE_DEBITO_ELECTRONICA, __DIR__ . '/../../resources/assets/xml/folios/56.xml')->getFilename())),
        ];
        $this->certification = new ExemptCertificationBuilder(
            $this->firma,
            new FileSource(__DIR__ . '/../../resources/assets/set_pruebas/004-factura_exenta.txt'),
            $this->folios,
            $emisor,
            $receptor
        );
    }

    /**
     * @test
     * @author David Lopez <dlopez@hsd.cl>
     */
    public function canInstance(): ExemptCertificationBuilder
    {
        $this->assertInstanceOf(ExemptCertificationBuilder::class, $this->certification);

        return $this->certification;
    }

    /**
     * @depends canInstance
     * @test
     * @param ExemptCertificationBuilder $certification
     * @author  David Lopez <dlopez@hsd.cl>
     */
    public function canParse(ExemptCertificationBuilder $certification): ExemptCertificationBuilder
    {
        $startFolios = [
            Dte::FACTURA_EXENTA_ELECTRONICA => '51',
            Dte::NOTA_DE_CREDITO_ELECTRONICA => '73',
            Dte::NOTA_DE_DEBITO_ELECTRONICA => '59',
        ];
        $this->assertInstanceOf(ExemptCertificationBuilder::class, $certification->parse($startFolios));

        return $certification;
    }

    /**
     * @test
     * @depends canParse
     * @param ExemptCertificationBuilder $certification
     * @author David Lopez <dlopez@hsd.cl>
     */
    public function canStampAndSign(ExemptCertificationBuilder $certification): ExemptCertificationBuilder
    {
        $this->assertInstanceOf(ExemptCertificationBuilder::class, $certification->setStampAndSign());

        return $certification;
    }

    /**
     * @test
     * @depends canStampAndSign
     * @param ExemptCertificationBuilder $certification
     * @version 18/1/21
     * @author  David Lopez <dlopez@hsd.cl>
     */
    public function canExport(ExemptCertificationBuilder $certification)
    {
        $output = 'file.xml';
        $this->assertGreaterThan(0, $certification->export($output));
    }
}
