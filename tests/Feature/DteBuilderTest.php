<?php

namespace HSDCL\DteCl\Tests\Feature;

use HSDCL\DteCl\Sii\Base\Dte;
use HSDCL\DteCl\Sii\Base\DteBuilder;
use HSDCL\DteCl\Sii\Base\JsonSource;
use HSDCL\DteCl\Sii\Certification\PacketDteBuilder;
use HSDCL\DteCl\Sii\Certification\ExemptCertificationBuilder;
use HSDCL\DteCl\Sii\Certification\FileSource;
use HSDCL\DteCl\Sii\Certification\BasicCertificationBuilder;
use HSDCL\DteCl\Util\Configuration;
use HSDCL\DteCl\Tests\TestCase;
use sasco\LibreDTE\FirmaElectronica;
use sasco\LibreDTE\Sii\Folios;

/**
 * Class ExampleTest
 * @package HSDCL\DteCl\Tests
 * @author  David Lopez <dleo.lopez@gmail.com>
 */
class DteBuilderTest extends TestCase
{
    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var FirmaElectronica
     */
    protected $firma;

    /**
     * @var Folios
     */
    protected $folios;

    /**
     * @var DteBuilder
     */
    protected $builder;

    /**
     * @author David Lopez <dlopez@hsd.cl>
     */
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $dotenv = \Dotenv\Dotenv::createImmutable(__DIR__ . '/../..');
        $dotenv->load();
        $dte = file_get_contents(__DIR__ . '/../../resources/assets/json/dte.json');
        $this->firma = DteBuilder::makeSignature([
            'cert' => file_get_contents(__DIR__ . '/../../resources/assets/certs/cert.crt'),
            'pkey' => file_get_contents(__DIR__ . '/../../resources/assets/certs/private.key')
        ]);
        $this->folios = [
            Dte::FACTURA_ELECTRONICA => new Folios(file_get_contents(Configuration::getInstance('folios-' . Dte::FACTURA_ELECTRONICA, __DIR__ . '/../../resources/assets/xml/folios/33.xml')->getFilename()))
        ];
        $this->builder = new DteBuilder(
            $this->firma,
            new JsonSource($dte),
            $this->folios
        );
    }

    /**
     * @test
     * @author David Lopez <dlopez@hsd.cl>
     */
    public function canInstance(): DteBuilder
    {
        $this->assertInstanceOf(DteBuilder::class, $this->builder);

        return $this->builder;
    }

    /**
     * @test
     * @depends canInstance
     * @author  David Lopez <dlopez@hsd.cl>
     */
    public function canParse(DteBuilder $builder): DteBuilder
    {
        $startFolios = [
            Dte::FACTURA_ELECTRONICA         => '6',
            Dte::NOTA_DE_CREDITO_ELECTRONICA => '6',
            Dte::NOTA_DE_DEBITO_ELECTRONICA  => '6',
        ];
        $this->assertInstanceOf(DteBuilder::class, $builder->parse($startFolios));

        return $builder;
    }

    /**
     * @test
     * @depends canParse
     * @author  David Lopez <dlopez@hsd.cl>
     */
    public function canStampAndSign(DteBuilder $builder): DteBuilder
    {
        $this->assertInstanceOf(DteBuilder::class, $builder->setStampAndSign());

        return $builder;
    }

    /**
     * @test
     * @author  David Lopez <dlopez@hsd.cl>
     */
    public function canBuild()
    {
        $caratula = [
            'FchResol'    => env('FchResol'),
            'NroResol'    => env('NroResol'),
        ];
        $this->assertInstanceOf(DteBuilder::class, $this->builder->build([], $caratula));

        return $this->builder;
    }

    /**
     * @version 7/12/21
     * @author  David Lopez <dlopez@hsd.cl>
     * @depends canBuild
     * @test
     */
    public function canExportXml(DteBuilder $builder)
    {
        dd(base64_decode($builder->export('some.xml')));
        $this->assertIsString($builder->export('some.xml'));
    }

    /**
     * @test
     * @author David Lopez <dlopez@hsd.cl>
     */
    public function canExportToPdf()
    {
        $this->assertTrue(BasicCertificationBuilder::exportToPdf('/home/dlopez/Projects/Php/dte-cl/resources/assets/xml/set_basico/1.xml'));
    }
}
